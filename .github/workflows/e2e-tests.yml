name: E2E Tests (Manual)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  test-e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:4.0.6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      rabbitmq:
        image: semanticbus/rabbitmq-stomp
        ports:
          - 5672:5672
          - 15674:15674
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 30s
          --health-timeout 30s
          --health-retries 3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm run install:all
      
    - name: Wait for services
      run: |
        echo "Waiting for MongoDB..."
        timeout 60 bash -c 'until nc -z localhost 27017; do sleep 1; done'
        echo "Waiting for RabbitMQ..."
        timeout 60 bash -c 'until nc -z localhost 5672; do sleep 1; done'
        
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build test environment
      run: make test-build
      
    - name: Run E2E tests
      run: make test-start
      
    - name: Collect test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-results
        path: |
          tests/e2e/results/
          tests/e2e/screenshots/
          tests/e2e/videos/
        retention-days: 7
        
    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const run_id = context.runId;
          const run_url = `https://github.com/${owner}/${repo}/actions/runs/${run_id}`;
          
          await github.rest.issues.create({
            owner,
            repo,
            title: `E2E Tests Failed - ${new Date().toISOString().split('T')[0]}`,
            body: `## E2E Test Failure\n\n**Run URL:** ${run_url}\n\n**Environment:** ${{ github.event.inputs.environment || 'scheduled' }}\n\n**Triggered by:** ${{ github.event_name }}\n\nPlease check the logs and artifacts for more details.`,
            labels: ['bug', 'e2e-tests', 'ci']
          });