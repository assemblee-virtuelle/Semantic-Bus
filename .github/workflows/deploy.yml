name: Déploiement Semantic Bus Engine

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environnement de déploiement'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build et Push Docker
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login vers Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extraction des métadonnées
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build et push de l'image Docker
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Déploiement Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
    
    - name: Deploy vers staging
      run: |
        echo "Déploiement vers staging avec l'image: ${{ needs.build-and-push.outputs.image-tag }}"
        # Ici vous pouvez ajouter vos scripts de déploiement
        # Par exemple: kubectl, docker-compose, etc.
    
    - name: Tests de fumée staging
      run: |
        echo "Tests de fumée sur l'environnement staging"
        # Ajoutez vos tests de validation post-déploiement

  deploy-production:
    name: Déploiement Production
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
    
    - name: Deploy vers production
      run: |
        echo "Déploiement vers production avec l'image: ${{ needs.build-and-push.outputs.image-tag }}"
        # Scripts de déploiement production
    
    - name: Tests de fumée production
      run: |
        echo "Tests de fumée sur l'environnement production"
        # Tests de validation post-déploiement

  security-scan-image:
    name: Scan Sécurité Image
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      security-events: write
    
    steps:
    - name: Scan de sécurité avec Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload des résultats vers GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notification de succès
      if: needs.deploy-production.result == 'success'
      run: |
        echo "✅ Déploiement réussi en production!"
        # Ici vous pouvez ajouter des notifications Slack, Teams, etc.
    
    - name: Notification d'échec
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "❌ Échec du déploiement en production!"
        # Notifications d'échec