name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install root dependencies
      run: npm install
      
    - name: Install engine dependencies
      run: cd packages/engine && npm install
      
    - name: Install tests dependencies
      run: cd tests/test_unitaires && npm install
      
    - name: Run unit tests (existing)
      run: npm run test:all
      
    - name: Run engine tests
      run: npm run test:engine
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./engine/coverage
        fail_ci_if_error: false

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test-unit
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm run install:all
      
    - name: Run integration tests
      run: npm run test:all

  # test-e2e:
  #   name: E2E Tests
  #   runs-on: ubuntu-latest
  #   needs: [test-unit, test-integration]
  #   
  #   services:
  #     mongodb:
  #       image: mongo:4.0.6
  #       ports:
  #         - 27017:27017
  #       options: >-
  #         --health-cmd "echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #         
  #     rabbitmq:
  #       image: semanticbus/rabbitmq-stomp
  #       ports:
  #         - 5672:5672
  #         - 15674:15674
  #         - 15672:15672
  #       options: >-
  #         --health-cmd "rabbitmq-diagnostics -q ping"
  #         --health-interval 30s
  #         --health-timeout 30s
  #         --health-retries 3
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #     
  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '20.x'
  #       cache: 'npm'
  #       
  #   - name: Install dependencies
  #     run: npm run install:all
  #     
  #   - name: Wait for services
  #     run: |
  #       echo "Waiting for MongoDB..."
  #       timeout 60 bash -c 'until nc -z localhost 27017; do sleep 1; done'
  #       echo "Waiting for RabbitMQ..."
  #       timeout 60 bash -c 'until nc -z localhost 5672; do sleep 1; done'
  #       
  #   - name: Setup Docker Buildx
  #     uses: docker/setup-buildx-action@v3
  #     
  #   - name: Build test environment
  #     run: make test-build
  #     
  #   - name: Run E2E tests
  #     run: make test-start

  lint:
    name: Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm run install:all
      
    - name: Run linting
      run: npm run lint:all

  # Security audit moved to dependency-quality-control.yml to avoid duplication

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration, lint]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      
    - name: Build and push Docker images
      run: |
        make docker-build
        # Add docker push commands if needed
        
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "Deployment step - configure according to your deployment strategy"
        # Add deployment commands here