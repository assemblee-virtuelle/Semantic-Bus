name: üöÄ Main CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop, dependency-update-and-quality-control ]
  
env:
  NODE_VERSION: '20.x'

jobs:
  # ===========================================
  # √âTAPE 1: CONTR√îLE DE QUALIT√â
  # ===========================================
  quality-control:
    name: üîç Quality Control
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install dependencies for all modules
        run: |
          echo "üì¶ Installing dependencies for all modules..."
          for module in core main engine timer; do
            if [ -f "packages/$module/package.json" ]; then
              echo "Installing $module dependencies..."
              cd packages/$module
              npm ci
              cd ../..
            fi
          done

      - name: Security audit - BLOCK on critical vulnerabilities
        run: |
          echo "üîç Running security audit - BLOCKING on critical vulnerabilities..."
          EXIT_CODE=0
          for module in core main engine timer; do
            if [ -f "packages/$module/package.json" ]; then
              echo "üîç Auditing $module..."
              cd packages/$module
              if ! npm audit --audit-level=critical; then
                echo "‚ùå CRITICAL vulnerabilities found in $module - BLOCKING CI"
                EXIT_CODE=1
              else
                echo "‚úÖ No critical vulnerabilities in $module"
              fi
              cd ../..
            fi
          done
          if [ $EXIT_CODE -ne 0 ]; then
            echo "üí• PIPELINE BLOCKED: Critical vulnerabilities detected"
            exit 1
          fi
          echo "‚úÖ Security audit passed - no critical vulnerabilities"

  # ===========================================
  # √âTAPE 2: STANDARDS DE CODE (TOUS LES PACKAGES)
  # ===========================================
  code-standards-core:
    name: ‚ú® Code Standards (core)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: |
          cd packages/core
          npm ci

      - name: Run linting
        run: |
          echo "‚ú® Linting core module..."
          cd packages/core
          npm run lint || echo "‚ö†Ô∏è Linting issues in core"
        continue-on-error: true

  code-standards-main:
    name: ‚ú® Code Standards (main)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: |
          cd packages/main
          npm ci

      - name: Run linting
        run: |
          echo "‚ú® Linting main module..."
          cd packages/main
          npm run lint || echo "‚ö†Ô∏è Linting issues in main"
        continue-on-error: true

  code-standards-engine:
    name: ‚ú® Code Standards (engine)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: |
          cd packages/engine
          npm ci

      - name: Run linting
        run: |
          echo "‚ú® Linting engine module..."
          cd packages/engine
          npm run lint || echo "‚ö†Ô∏è Linting issues in engine"
        continue-on-error: true

  code-standards-timer:
    name: ‚ú® Code Standards (timer)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16.x'  # Timer uses Node 16 in Dockerfile

      - name: Install dependencies
        run: |
          cd packages/timer
          npm ci

      - name: Run linting
        run: |
          echo "‚ú® Linting timer module..."
          cd packages/timer
          npm run lint || echo "‚ö†Ô∏è Linting issues in timer"
        continue-on-error: true

  # ===========================================
  # √âTAPE 3: TESTS (VERSIONS NODE DES DOCKERFILES)
  # ===========================================
  tests:
    name: üß™ Tests
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false  # Continue all tests even if one fails
      matrix:
        include:
          # Core - test on all Node versions used by other packages
          - module: core
            node-version: '16.x'  # timer version
          - module: core
            node-version: '18.x'  # main/engine version
          
          # Main - uses Node 18 in Dockerfile-alpine
          - module: main
            node-version: '18.x'
          
          # Engine - uses Node 18 in Dockerfile-alpine  
          - module: engine
            node-version: '18.x'
          
          # Timer - uses Node 16 in Dockerfile-alpine
          - module: timer
            node-version: '16.x'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: |
          cd packages/${{ matrix.module }}
          npm ci

      - name: Run tests
        run: |
          echo "üß™ Testing ${{ matrix.module }} with Node ${{ matrix.node-version }}..."
          cd packages/${{ matrix.module }}
          npm test 