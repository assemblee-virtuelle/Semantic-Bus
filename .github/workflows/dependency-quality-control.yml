name: Dependency Quality Control

on:
  push:
    branches: [ master, develop, dependency-update-and-quality-control ]
  schedule:
    # Run weekly on Mondays at 8:00 AM UTC
    - cron: '0 8 * * 1'

jobs:
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies for all modules
        run: |
          echo "Installing dependencies for all modules..."
          for module in core main engine timer; do
            if [ -f "packages/$module/package.json" ]; then
              echo "Installing $module dependencies..."
              cd packages/$module
              npm ci
              cd ../..
            fi
          done

      - name: Run security audit for all modules
        run: |
          echo "Running security audit for all modules..."
          for module in core main engine timer; do
            if [ -f "packages/$module/package.json" ]; then
              echo "Auditing $module..."
              cd packages/$module
              npm audit --audit-level=moderate || echo "⚠️ Vulnerabilities found in $module"
              cd ../..
            fi
          done
        continue-on-error: true

      - name: Check for outdated dependencies
        run: |
          echo "Checking for outdated dependencies..."
          for module in core main engine timer; do
            if [ -f "packages/$module/package.json" ]; then
              echo "Checking outdated for $module..."
              cd packages/$module
              npm outdated --long > ../../outdated-$module.txt || true
              cd ../..
            fi
          done
        continue-on-error: true

      - name: Upload outdated dependencies report
        uses: actions/upload-artifact@v4
        with:
          name: outdated-dependencies-all-modules
          path: outdated-*.txt
        if: always()

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install license checker
        run: npm install -g license-checker

      - name: Check licenses for all modules
        run: |
          for dir in core main engine timer; do
            if [ -f "packages/$dir/package.json" ]; then
              echo "Checking licenses for $dir..."
              cd packages/$dir
              license-checker --onlyAllow "MIT;ISC;BSD;Apache;LGPL;GPL" --excludePrivatePackages > ../../licenses-$dir.txt || true
              cd ../..
            fi
          done

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: licenses-*.txt
        if: always()

  vulnerability-scan:
    name: Advanced Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Authenticate with Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
        if: env.SNYK_TOKEN != ''
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Snyk security scan
        run: |
          for dir in core main engine timer; do
            if [ -f "packages/$dir/package.json" ]; then
              echo "Scanning $dir with Snyk..."
              cd packages/$dir
              npm install
              snyk test --severity-threshold=medium --json > ../../snyk-$dir.json || true
              cd ../..
            fi
          done
        continue-on-error: true

      - name: Upload Snyk reports
        uses: actions/upload-artifact@v4
        with:
          name: snyk-security-reports
          path: snyk-*.json
        if: always()

  dependency-analysis:
    name: Dependency Analysis & Recommendations
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install analysis tools
        run: |
          npm install -g npm-check-updates
          npm install -g depcheck

      - name: Analyze unused dependencies
        run: |
          for dir in core main engine timer; do
            if [ -f "packages/$dir/package.json" ]; then
              echo "Analyzing unused dependencies for $dir..."
              cd packages/$dir
              depcheck --json > ../../depcheck-$dir.json || true
              cd ../..
            fi
          done

      - name: Check for major updates available
        run: |
          for dir in core main engine timer; do
            if [ -f "packages/$dir/package.json" ]; then
              echo "Checking updates for $dir..."
              cd packages/$dir
              ncu --format json > ../../ncu-$dir.json || true
              cd ../..
            fi
          done

      - name: Upload analysis reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis-reports
          path: |
            depcheck-*.json
            ncu-*.json
        if: always()

  summary-report:
    name: Generate Summary Report
    runs-on: ubuntu-latest
    needs: [dependency-audit, license-check, vulnerability-scan, dependency-analysis]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate dependency quality summary
        run: |
          echo "# Dependency Quality Control Report" > dependency-report.md
          echo "Generated on: $(date)" >> dependency-report.md
          echo "" >> dependency-report.md
          
          echo "## Security Audit Results" >> dependency-report.md
          for file in outdated-dependencies-*/outdated-*.txt; do
            if [ -f "$file" ]; then
              module=$(basename "$file" .txt | sed 's/outdated-//')
              echo "### $module" >> dependency-report.md
              echo '```' >> dependency-report.md
              head -20 "$file" >> dependency-report.md
              echo '```' >> dependency-report.md
            fi
          done
          
          echo "## License Compliance" >> dependency-report.md
          for file in license-reports/licenses-*.txt; do
            if [ -f "$file" ]; then
              module=$(basename "$file" .txt | sed 's/licenses-//')
              echo "### $module Licenses" >> dependency-report.md
              echo "License check completed for $module module" >> dependency-report.md
            fi
          done

      - name: Upload summary report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-quality-summary
          path: dependency-report.md

      # Note: PR comments removed since this workflow only runs on push events 