version: '3.5'
services:
  traefik:
    image: traefik:v2.5
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:90" # Spécifier l'adresse d'entrée
    ports:
      - "8080:8080"
    networks:
      - bus
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  ##Laisser le nom main pour la localisation des folder pour la resolution du path de config
  timer:
    build:
      context: .
      dockerfile: ./packages/timer/Dockerfile-alpine
    container_name: timer
    image: semanticbus/timer
    environment:
        - APP_PORT=100
        - NODE_ENV=development_docker
        - CONFIG_URL=$CONFIG_URL
    volumes:
      - ./packages/timer:/data/packages/timer/
      - ./packages/core:/data/packages/core/
      - ./config.local.json:/data/packages/timer/config.json
    networks:
      - bus
    ports:
      - "100:100"
    expose:
      - "100"
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      scylla:
        condition: service_healthy
    command: ["/data/scripts/wait-for-it.sh", "rabbitmq:5672", "-t", "25", "--", "nodemon", "-L", "--watch", "/data/packages/timer/*",  "--watch", "/data/packages/core/*",  "--ignore", "configuration.js",  "/data/packages/timer/app.js"]

  # engineV1:
  #   image: dataplayers/semantic-bus-engine:v1.0
  #   container_name: engineV1
  #   environment:
  #       - APP_PORT=91
  #       - NODE_ENV=development_docker
  #   volumes:
  #     - ./config.local.json:/data/engine/config.json
  #   network_mode: host
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.engineV1.rule=Host(`localhost`)" # Utiliser localhost comme hôte
  #     - "traefik.http.routers.engineV1.rule=PathPrefix(`/engine/v1`)"
  #     - traefik.http.middlewares.strip-v1-segment.replacepathregex.regex=^/engine/v1(/.*)$$
  #     - traefik.http.middlewares.strip-v1-segment.replacepathregex.replacement=/engine$$1
  #     - traefik.http.routers.engineV1.middlewares=strip-v1-segment
  #     - "traefik.http.services.engineV1.loadbalancer.server.port=91"
  #   depends_on:
  #       - mongodb
  #       - rabbitmq
  #   command: bash -c "/data/scripts/wait-for-it.sh rabbitmq:5672 -t 60 -- nodemon --watch /data/engine --watch /data/core --ignore configuration.js --max-old-space-size=4096 /data/engine/app.js"

  engine:
    build:
      context: .
      dockerfile: ./packages/engine/Dockerfile-alpine
    container_name: engine
    restart: always
    environment:
        - APP_PORT=92
        - NODE_ENV=development_docker
    volumes:
      - ./packages/engine:/data/packages/engine/
      - ./packages/core:/data/packages/core/
      - ./config.local.json:/data/packages/engine/config.json
      - ./uploads:/data/uploads/
    networks:
      - bus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.engine.rule=Host(`localhost`)" # Utiliser localhost comme hôte
      - "traefik.http.routers.engine.rule=PathPrefix(`/engine/v2`)"
      - traefik.http.middlewares.strip-v2-segment.replacepathregex.regex=^/engine/v2(/.*)$$
      - traefik.http.middlewares.strip-v2-segment.replacepathregex.replacement=/engine$$1
      - traefik.http.routers.engine.middlewares=strip-v2-segment
      - "traefik.http.services.engine.loadbalancer.server.port=92"
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      scylla:
        condition: service_healthy
    command: bash -c "nodemon --exitcrash --watch /data/packages/engine --watch /data/packages/core --ignore configuration.js --max-old-space-size=8192 /data/packages/engine/app.js"


  main:
    build:
      context: .
      dockerfile: ./packages/main/Dockerfile-alpine
    container_name: main
    restart: always
    image: semanticbus/main
    tty: true
    environment:
        - APP_PORT=80
        - NODE_ENV=development_docker
    volumes:
      - ./packages/main:/data/packages/main/
      - ./packages/core:/data/packages/core/
      - ./uploads:/data/uploads/
      - ./config.local.json:/data/packages/main/config.json
    networks:
      - bus
    ports:
      - "80:80"
    expose:
      - "80"
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      scylla:
        condition: service_healthy
    command: ["nodemon", "-L","--exitcrash" ,"--watch", "/data/packages/main/*",  "--watch", "/data/packages/core/*",  "--ignore", "configuration.js", "--max-old-space-size=8192",  "/data/packages/main/app.js"]

  rabbitmq:
    image: semanticbus/rabbitmq-stomp
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15674:15674
      - 15672:15672
    networks:
      - bus
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "list_connections"]
      interval: 15s
      timeout: 10s
      retries: 10

  mongodb:
    image: mongo:4.4.29
    container_name: mongodb
    networks:
      - bus
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 15s
      timeout: 10s
      retries: 10

  # mongodb_flow:
  #   image: mongo:7.0.11 # Fixer la version de l'image
  #   container_name: mongodb_flow
  #   networks:
  #     - bus
  #   ports:
  #     - "27018:27017"
  #   expose:
  #     - "27017"
  #   volumes:
  #     - data_flow:/data/db
  #   command: >
  #     mongod --wiredTigerCacheSizeGB 2
  #   healthcheck:
  #     test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
  #     interval: 15s
  #     timeout: 10s
  #     retries: 10

  scylla:
    image: scylladb/scylla:latest
    container_name: scylla
    ports:
      - "9042:9042" # Port par défaut pour CQL
      - "9180:9180" # Port par défaut pour l'API REST
      - "8000:8000" # Port pour Alternator
    networks:
      - bus
    volumes:
      - scylla_data:/var/lib/scylla
      # - ./init-scripts/scylla.yaml:/etc/scylla/scylla.yaml
    command: >
      --smp 4
      --memory 6G
      --overprovisioned 1
      --api-address 0.0.0.0
      --cluster-name "fragments_cluster"
      --alternator-port=8000
      --alternator-write-isolation always
    environment:
      - ALTERNATOR_ACCESS_KEY_ID=yourAccessKeyId
      - ALTERNATOR_SECRET_ACCESS_KEY=yourSecretAccessKey
    healthcheck:
      test: ["CMD", "cqlsh","-e describe keyspaces"]
      interval: 15s
      timeout: 10s
      retries: 10
  scylla-load-keyspace:
    container_name: scylla-load-keyspace
    image: scylladb/scylla:latest
    depends_on:
      scylla:
        condition: service_healthy
    networks:
      - bus
    entrypoint: ["/scylla-entrypoint.sh"]
    volumes:
      - ./init-scripts/scylla-initdb.cql:/scylla-initdb.cql
      - ./init-scripts/scylla-entrypoint.sh:/scylla-entrypoint.sh
volumes:
  data:
  data_flow:
  scylla_data: # Volume pour les données de ScyllaDB

networks:
  bus:
    name: bus_network
    # external: true

