FROM node:20-alpine

WORKDIR /data/engine

# confirm installation
RUN node -v
RUN npm -v

#ARG CONFIG_URL
#ARG PM2_PUBLIC_KEY
#ARG PM2_SECRET_KEY
ARG ENV

#install pm2 to production (monitoring)
#RUN npm install pm2 -g
#install nodemon to dev (support hot realoading) (need specific command in compose)
RUN npm install nodemon -g

#ENV CONFIG_URL=$CONFIG_URL
#ENV PM2_PUBLIC_KEY=$PM2_PUBLIC_KEY
#ENV PM2_SECRET_KEY=$PM2_SECRET_KEY
ENV BROADCAST_LOGS 1
ENV FORCE_INSPECTOR 1

# install tool for npm lib compile in C
RUN apk add --update --no-cache autoconf libtool automake python3 py3-pip alpine-sdk make g++ bash curl

# Setup workspace structure - copy root package.json with workspaces
COPY package.json /data/
RUN mkdir -p /data/packages/engine /data/packages/core

# Copy package.json files for workspace structure
COPY packages/engine/package.json /data/packages/engine/
COPY packages/core/package.json /data/packages/core/

# Install all workspace dependencies from root
RUN cd /data/ && npm cache clean --force && npm install --legacy-peer-deps --loglevel verbose

# RUN curl https://raw.githubusercontent.com/eficode/wait-for/v2.2.3/wait-for --create-dirs -o /data/scripts/wait-for-it.sh
# RUN chmod u+x /data/scripts/wait-for-it.sh # Removed: using healthchecks instead

# Copy source code maintaining workspace structure
COPY packages/core /data/packages/core/
COPY packages/engine /data/packages/engine/

# Keep working directory as engine for compatibility
WORKDIR /data/packages/engine

# COPY ./wait-for-it.sh /data/scripts/ # Removed: using healthchecks instead
# COPY ./wait-for.sh /data/scripts/ # Removed: using healthchecks instead


# Expose ports (for orchestrators and dynamic reverse proxies)
EXPOSE 8080

# CMD [ "pm2-runtime", "app.js", "--name" ,"engine"]
CMD ["node", "app.js"]
